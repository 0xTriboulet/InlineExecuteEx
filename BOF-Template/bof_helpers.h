#pragma once
#include <Windows.h>
#define RETURN_FALSE_ON_NULL(x) if ( (x) == NULL ) { return FALSE; }
#define RETURN_NULL_ON_NULL(x)  if ( (x) == NULL ) { return NULL; }
#define RETURN_FALSE_ON_ZERO(x) if ( (x) == 0 ) { return FALSE; }

// #define TRACING // Enable this to get tracing output in the Beacon console for Release builds

#ifdef TRACING
#define TracingBeaconPrintf(...) BeaconPrintf(__VA_ARGS__) // Disable BeaconPrintf Statements
#else
#define TracingBeaconPrintf(...) // Disable BeaconPrintf Statements
#endif


#ifdef _DEBUG
#define PRINT(...) printf(__VA_ARGS__)
#else
#define PRINT(x)
#endif

/* Defining symbols for the OS arch */
#if defined(__x86_64__) || defined(_WIN64)
#define MACHINE_CODE IMAGE_FILE_MACHINE_AMD64
#define PREPENDSYMBOL "__imp_"
#else
#define MACHINE_CODE IMAGE_FILE_MACHINE_I386
#define PREPENDSYMBOL "__imp__"
#endif

typedef struct IFEntry {
	const UCHAR* name;   // points to string literal; no heap copy needed
	UCHAR* ptr;    // target function pointer
} IFEntry;

IFEntry* g_if = NULL;
SIZE_T   g_if_count = 0;
SIZE_T   g_if_cap = 0;

BOOL IF_Init(SIZE_T cap) {
	if (cap == 0) {
		cap = 64; // larger than we need, room for growth
	}
	g_if = (IFEntry*)BeaconVirtualAlloc(NULL, cap * sizeof(IFEntry),
		MEM_COMMIT | MEM_RESERVE | MEM_TOP_DOWN,
		PAGE_READWRITE);
	if (!g_if) return FALSE;
	g_if_count = 0;
	g_if_cap = cap;
	return TRUE;
}

BOOL IF_Add(const char* name, void* ptr) {
	if (g_if == NULL || name == NULL) {
		return FALSE;
	}
	if (g_if_count >= g_if_cap) {
		return FALSE; // keep it simple; pre-size once
	}

	g_if[g_if_count].name = (const UCHAR*)name; // point at literal
	g_if[g_if_count].ptr = (UCHAR*)ptr;
	g_if_count++;
	return TRUE;
}

UCHAR* IF_Get(const char* name) {
	DFR_LOCAL(MSVCRT, strcmp)
	if (g_if == NULL || name == NULL) {
		return NULL;
	}
	for (SIZE_T i = 0; i < g_if_count; i++) {
		// names are ASCII literals; strcmp is fine
		if (strcmp((const char*)g_if[i].name, name) == 0)
			return g_if[i].ptr;
	}
	return NULL;
}

BOOL IF_Set(const char* name, void* ptr) {
	DFR_LOCAL(MSVCRT, strcmp)
	if (g_if == NULL || name == NULL) { 
		return FALSE;
	}
	for (SIZE_T i = 0; i < g_if_count; i++) {
		// Find the name and set the ptr value
		if (strcmp((const char*)g_if[i].name, name) == 0) {
			g_if[i].ptr = (UCHAR*)ptr;
			return TRUE;
		}
	}
	return FALSE;
}

#define ADD(name, fn)  do { if (!IF_Add(name, (void*)(fn))) return FALSE; } while(0)

BOOL InitInternalFunctionsDynamic(void) {
	if (!IF_Init(64)) {
		return FALSE;
	}

	DFR_LOCAL(KERNEL32, GetModuleHandleW)
	DFR_LOCAL(KERNEL32, LoadLibraryW)

	// Data parsing
	ADD("BeaconDataParse", BeaconDataParse);
	ADD("BeaconDataPtr", BeaconDataPtr);
	ADD("BeaconDataInt", BeaconDataInt);
	ADD("BeaconDataShort", BeaconDataShort);
	ADD("BeaconDataLength", BeaconDataLength);
	ADD("BeaconDataExtract", BeaconDataExtract);

	// Format
	ADD("BeaconFormatAlloc", BeaconFormatAlloc);
	ADD("BeaconFormatReset", BeaconFormatReset);
	ADD("BeaconFormatAppend", BeaconFormatAppend);
	ADD("BeaconFormatPrintf", BeaconFormatPrintf);
	ADD("BeaconFormatToString", BeaconFormatToString);
	ADD("BeaconFormatFree", BeaconFormatFree);
	ADD("BeaconFormatInt", BeaconFormatInt);

	// Output / token / proc stuff
	ADD("BeaconOutput", BeaconOutput);
	ADD("BeaconPrintf", BeaconPrintf);
	ADD("BeaconUseToken", BeaconUseToken);
	ADD("BeaconRevertToken", BeaconRevertToken);
	ADD("BeaconIsAdmin", BeaconIsAdmin);
	ADD("BeaconGetSpawnTo", BeaconGetSpawnTo);
	ADD("BeaconInjectProcess", BeaconInjectProcess);
	ADD("BeaconInjectTemporaryProcess", BeaconInjectTemporaryProcess);
	ADD("BeaconSpawnTemporaryProcess", BeaconSpawnTemporaryProcess);
	ADD("BeaconCleanupProcess", BeaconCleanupProcess);

	// Helpers
	ADD("toWideChar", toWideChar);

	// Datastore
	ADD("BeaconInformation", BeaconInformation);
	ADD("BeaconAddValue", BeaconAddValue);
	ADD("BeaconGetValue", BeaconGetValue);
	ADD("BeaconRemoveValue", BeaconRemoveValue);
	ADD("BeaconDataStoreGetItem", BeaconDataStoreGetItem);

	// Reserve SEH entries; fill pointers below
	ADD("__C_specific_handler", NULL);
#ifdef _M_IX86
	ADD("__C_specific_handler@8", NULL);   // accept decorated x86 name too
#endif

	ADD("BeaconDataStoreProtectItem", BeaconDataStoreProtectItem);
	ADD("BeaconDataStoreUnprotectItem", BeaconDataStoreUnprotectItem);
	ADD("BeaconDataStoreMaxEntries", BeaconDataStoreMaxEntries);

	// Info
	ADD("BeaconGetCustomUserData", BeaconGetCustomUserData);
	ADD("BeaconGetSyscallInformation", BeaconGetSyscallInformation);

	// Mem/threads/handles
	ADD("BeaconVirtualAlloc", BeaconVirtualAlloc);
	ADD("BeaconVirtualAllocEx", BeaconVirtualAllocEx);
	ADD("BeaconVirtualProtect", BeaconVirtualProtect);
	ADD("BeaconVirtualProtectEx", BeaconVirtualProtectEx);
	ADD("BeaconVirtualFree", BeaconVirtualFree);
	ADD("BeaconGetThreadContext", BeaconGetThreadContext);
	ADD("BeaconSetThreadContext", BeaconSetThreadContext);
	ADD("BeaconResumeThread", BeaconResumeThread);
	ADD("BeaconOpenProcess", BeaconOpenProcess);
	ADD("BeaconOpenThread", BeaconOpenThread);
	ADD("BeaconCloseHandle", BeaconCloseHandle);
	ADD("BeaconUnmapViewOfFile", BeaconUnmapViewOfFile);
	ADD("BeaconVirtualQuery", BeaconVirtualQuery);
	ADD("BeaconDuplicateHandle", BeaconDuplicateHandle);
	ADD("BeaconReadProcessMemory", BeaconReadProcessMemory);
	ADD("BeaconWriteProcessMemory", BeaconWriteProcessMemory);

	// Gate
	ADD("BeaconDisableBeaconGate", BeaconDisableBeaconGate);
	ADD("BeaconEnableBeaconGate", BeaconEnableBeaconGate);
	ADD("BeaconDisableBeaconGateMasking", BeaconDisableBeaconGateMasking);
	ADD("BeaconEnableBeaconGateMasking", BeaconEnableBeaconGateMasking);

	// Kernel32 imports (useful to expose)
	ADD("GetProcAddress", GetProcAddress);
	ADD("GetModuleHandleA", GetModuleHandleA);
	ADD("GetModuleHandleW", GetModuleHandleW);
	ADD("LoadLibraryA", LoadLibraryA);
	ADD("LoadLibraryW", LoadLibraryW);
	ADD("FreeLibrary", FreeLibrary);

	// Fill SEH helper after all adds
	{
		PVOID specificHandler = NULL;
		HMODULE hNtdll = GetModuleHandleW(L"ntdll.dll");
		if (specificHandler == NULL && hNtdll != NULL) {
			specificHandler = (PVOID)GetProcAddress(hNtdll, "__C_specific_handler");
		}

		if (specificHandler == NULL) {
			HMODULE hKernel32 = GetModuleHandleW(L"kernel32.dll");
			if (hKernel32 != NULL) {
				specificHandler = (PVOID)GetProcAddress(hKernel32, "__C_specific_handler");
			}
		}

		IF_Set("__C_specific_handler", specificHandler);
	}

	return TRUE;
}
#undef ADD


#ifdef _DEBUG

#if _WIN64
unsigned char rawCoff[1127] = {
	0x64, 0x86, 0x08, 0x00, 0xAB, 0x0E, 0xEB, 0x68, 0x56, 0x02, 0x00, 0x00,
	0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78,
	0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x00, 0x00, 0x54, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x50, 0x60,
	0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x30, 0xC0, 0x2E, 0x62, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x30, 0xC0, 0x2E, 0x78, 0x64, 0x61,
	0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x08, 0x00, 0x00, 0x00, 0xB2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x30, 0x40,
	0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0xBA, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x10, 0x10, 0x40, 0x2E, 0x64, 0x72, 0x65, 0x63, 0x74, 0x76, 0x65,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00,
	0xCF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x10, 0x00, 0x2E, 0x70, 0x64, 0x61,
	0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0C, 0x00, 0x00, 0x00, 0x2C, 0x02, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x40, 0x00, 0x30, 0x40,
	0x2F, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x08, 0x10, 0x00, 0x48, 0x83, 0xEC, 0x38, 0x89, 0x54, 0x24, 0x34,
	0x48, 0x89, 0x4C, 0x24, 0x28, 0x48, 0x8B, 0x54, 0x24, 0x28, 0x31, 0xC0,
	0x41, 0x89, 0xC0, 0x45, 0x31, 0xC9, 0x4C, 0x89, 0xC1, 0xFF, 0x15, 0x00,
	0x00, 0x00, 0x00, 0x4C, 0x8B, 0x44, 0x24, 0x28, 0x48, 0x8D, 0x15, 0x00,
	0x00, 0x00, 0x00, 0x48, 0x8B, 0x05, 0x00, 0x00, 0x00, 0x00, 0x31, 0xC9,
	0xFF, 0xD0, 0x90, 0x48, 0x83, 0xC4, 0x38, 0xC3, 0x1F, 0x00, 0x00, 0x00,
	0x13, 0x00, 0x00, 0x00, 0x04, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x0A, 0x00,
	0x00, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
	0x04, 0x00, 0x01, 0x04, 0x01, 0x00, 0x04, 0x62, 0x00, 0x00, 0x54, 0x48,
	0x45, 0x20, 0x4D, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x20, 0x57, 0x41,
	0x53, 0x3A, 0x20, 0x25, 0x73, 0x0A, 0x00, 0x20, 0x2F, 0x46, 0x41, 0x49,
	0x4C, 0x49, 0x46, 0x4D, 0x49, 0x53, 0x4D, 0x41, 0x54, 0x43, 0x48, 0x3A,
	0x22, 0x5F, 0x43, 0x52, 0x54, 0x5F, 0x53, 0x54, 0x44, 0x49, 0x4F, 0x5F,
	0x49, 0x53, 0x4F, 0x5F, 0x57, 0x49, 0x44, 0x45, 0x5F, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x52, 0x53, 0x3D, 0x30, 0x22, 0x20, 0x2F,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4C, 0x54, 0x4C, 0x49, 0x42, 0x3A, 0x75,
	0x75, 0x69, 0x64, 0x2E, 0x6C, 0x69, 0x62, 0x20, 0x2F, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4C, 0x54, 0x4C, 0x49, 0x42, 0x3A, 0x75, 0x75, 0x69, 0x64,
	0x2E, 0x6C, 0x69, 0x62, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
	0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x2E, 0x74,
	0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x03, 0x01, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
	0x3C, 0xEA, 0x6C, 0x47, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x64,
	0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x62,
	0x73, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
	0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x78,
	0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
	0x00, 0x00, 0x03, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x31, 0x7F, 0x88, 0x37, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x72,
	0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00,
	0x00, 0x00, 0x03, 0x01, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x2D, 0xAE, 0x45, 0x86, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x2E, 0x64, 0x72, 0x65, 0x63, 0x74, 0x76, 0x65,
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0x01, 0x5D, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x93, 0x24, 0xCE, 0x06, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x2E, 0x70, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x01, 0x0C, 0x00,
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xED, 0xC2, 0x9D, 0x29, 0x07, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x40, 0x66, 0x65, 0x61, 0x74, 0x2E, 0x30, 0x30,
	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x00, 0x67, 0x6F,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x2E, 0x66, 0x69, 0x6C, 0x65, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x00, 0x00, 0x67, 0x01, 0x68, 0x65,
	0x6C, 0x6C, 0x6F, 0x5F, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x2E, 0x63, 0x78,
	0x78, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x2E, 0x6C, 0x6C, 0x76,
	0x6D, 0x5F, 0x61, 0x64, 0x64, 0x72, 0x73, 0x69, 0x67, 0x00, 0x5F, 0x5F,
	0x69, 0x6D, 0x70, 0x5F, 0x42, 0x65, 0x61, 0x63, 0x6F, 0x6E, 0x50, 0x72,
	0x69, 0x6E, 0x74, 0x66, 0x00, 0x5F, 0x5F, 0x69, 0x6D, 0x70, 0x5F, 0x55,
	0x53, 0x45, 0x52, 0x33, 0x32, 0x24, 0x4D, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6F, 0x78, 0x41, 0x00, 0x3F, 0x3F, 0x5F, 0x43, 0x40, 0x5F,
	0x30, 0x42, 0x46, 0x40, 0x44, 0x49, 0x4C, 0x4F, 0x4A, 0x45, 0x46, 0x4A,
	0x40, 0x54, 0x48, 0x45, 0x3F, 0x35, 0x4D, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x3F, 0x35, 0x57, 0x41, 0x53, 0x3F, 0x33, 0x3F, 0x35, 0x3F, 0x24,
	0x43, 0x46, 0x73, 0x3F, 0x36, 0x3F, 0x24, 0x41, 0x41, 0x40, 0x00
};
#endif // End Win64
#ifdef _M_IX86
unsigned char rawCoff[950] = {
	0x4C, 0x01, 0x06, 0x00, 0x74, 0x1B, 0xEB, 0x68, 0xEB, 0x01, 0x00, 0x00,
	0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78,
	0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x57, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x5B, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x50, 0x60,
	0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x30, 0xC0, 0x2E, 0x62, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x30, 0xC0, 0x2E, 0x72, 0x64, 0x61,
	0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x15, 0x00, 0x00, 0x00, 0x79, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x10, 0x10, 0x40,
	0x2E, 0x64, 0x72, 0x65, 0x63, 0x74, 0x76, 0x65, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x8E, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0A, 0x10, 0x00, 0x2F, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xEB, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x55, 0x89, 0xE5, 0x83,
	0xEC, 0x10, 0x8B, 0x45, 0x0C, 0x8B, 0x45, 0x08, 0x8B, 0x45, 0x08, 0x31,
	0xC9, 0xC7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x04,
	0xC7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x0C,
	0x00, 0x00, 0x00, 0x00, 0xFF, 0x15, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x45,
	0x08, 0x31, 0xC9, 0x8D, 0x0D, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x04, 0x24,
	0x00, 0x00, 0x00, 0x00, 0x89, 0x4C, 0x24, 0x04, 0x89, 0x44, 0x24, 0x08,
	0xFF, 0x15, 0x00, 0x00, 0x00, 0x00, 0x83, 0xC4, 0x10, 0x5D, 0xC3, 0x2E,
	0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x06, 0x00, 0x39, 0x00, 0x00,
	0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x00, 0x06, 0x00, 0x54, 0x48, 0x45, 0x20, 0x4D, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x20, 0x57, 0x41, 0x53, 0x3A, 0x20, 0x25, 0x73,
	0x0A, 0x00, 0x20, 0x2F, 0x46, 0x41, 0x49, 0x4C, 0x49, 0x46, 0x4D, 0x49,
	0x53, 0x4D, 0x41, 0x54, 0x43, 0x48, 0x3A, 0x22, 0x5F, 0x43, 0x52, 0x54,
	0x5F, 0x53, 0x54, 0x44, 0x49, 0x4F, 0x5F, 0x49, 0x53, 0x4F, 0x5F, 0x57,
	0x49, 0x44, 0x45, 0x5F, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x53, 0x3D, 0x30, 0x22, 0x20, 0x2F, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4C, 0x54, 0x4C, 0x49, 0x42, 0x3A, 0x75, 0x75, 0x69, 0x64, 0x2E, 0x6C,
	0x69, 0x62, 0x20, 0x2F, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4C, 0x54, 0x4C,
	0x49, 0x42, 0x3A, 0x75, 0x75, 0x69, 0x64, 0x2E, 0x6C, 0x69, 0x62, 0x2E,
	0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x03, 0x01, 0x57, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
	0x00, 0x39, 0x1C, 0x64, 0xB4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E,
	0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E,
	0x62, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
	0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E,
	0x72, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
	0x00, 0x00, 0x00, 0x03, 0x01, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x2D, 0xAE, 0x45, 0x86, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
	0x00, 0x00, 0x00, 0x02, 0x00, 0x2E, 0x64, 0x72, 0x65, 0x63, 0x74, 0x76,
	0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x01, 0x5D,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x93, 0x24, 0xCE, 0x05,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x66, 0x65, 0x61, 0x74, 0x2E, 0x30,
	0x30, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x00, 0x5F,
	0x67, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x02, 0x00, 0x2E, 0x66, 0x69, 0x6C, 0x65, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x00, 0x00, 0x67, 0x01, 0x68,
	0x65, 0x6C, 0x6C, 0x6F, 0x5F, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x2E, 0x63,
	0x78, 0x78, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x2E, 0x6C, 0x6C,
	0x76, 0x6D, 0x5F, 0x61, 0x64, 0x64, 0x72, 0x73, 0x69, 0x67, 0x00, 0x5F,
	0x5F, 0x69, 0x6D, 0x70, 0x5F, 0x5F, 0x42, 0x65, 0x61, 0x63, 0x6F, 0x6E,
	0x50, 0x72, 0x69, 0x6E, 0x74, 0x66, 0x00, 0x5F, 0x5F, 0x69, 0x6D, 0x70,
	0x5F, 0x5F, 0x55, 0x53, 0x45, 0x52, 0x33, 0x32, 0x24, 0x4D, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x6F, 0x78, 0x41, 0x00, 0x3F, 0x3F, 0x5F,
	0x43, 0x40, 0x5F, 0x30, 0x42, 0x46, 0x40, 0x44, 0x49, 0x4C, 0x4F, 0x4A,
	0x45, 0x46, 0x4A, 0x40, 0x54, 0x48, 0x45, 0x3F, 0x35, 0x4D, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x3F, 0x35, 0x57, 0x41, 0x53, 0x3F, 0x33, 0x3F,
	0x35, 0x3F, 0x24, 0x43, 0x46, 0x73, 0x3F, 0x36, 0x3F, 0x24, 0x41, 0x41,
	0x40, 0x00
};

#endif // End Win32
#endif